import { useAuth } from "@/contexts/AuthContext";
import { useMutation } from "@apollo/client";
import { Ionicons } from "@expo/vector-icons";
import { router, useLocalSearchParams } from "expo-router";
import React, { useEffect, useState } from "react";
import {
  Alert,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from "react-native";
import {
  CREATE_REVIEW,
  GET_REVIEW_STATS,
  GET_STADIUM_REVIEWS,
} from "../../graphql";

export default function SubmitReviewScreen() {
  const { user } = useAuth();
  const params = useLocalSearchParams();
  const {
    reservationId,
    stadiumId,
    stadiumName,
    date,
    startTime,
    endTime,
    courtNumber,
    sport,
  } = params;

  const [rating, setRating] = useState(0);
  const [comment, setComment] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Suppress console errors for expected business logic errors
  useEffect(() => {
    const originalError = console.error;
    console.error = (...args) => {
      const message = args.join(" ");
      // Don't show "Review already exists" errors in console
      if (
        message.includes("Review already exists") ||
        message.includes("ApolloError: Review already exists")
      ) {
        return;
      }
      originalError.apply(console, args);
    };

    return () => {
      console.error = originalError;
    };
  }, []);

  const [createReview] = useMutation(CREATE_REVIEW, {
    // Refetch queries after successful mutation
    refetchQueries: [
      {
        query: GET_STADIUM_REVIEWS,
        variables: { stadiumId: parseInt(stadiumId as string) },
      },
      {
        query: GET_REVIEW_STATS,
        variables: { stadiumId: parseInt(stadiumId as string) },
      },
    ],
  });

  const handleStarPress = (selectedRating: number) => {
    setRating(selectedRating);
  };

  const handleSubmitReview = async () => {
    if (rating === 0) {
      Alert.alert("Th√¥ng b√°o", "Vui l√≤ng ch·ªçn s·ªë sao ƒë√°nh gi√°.");
      return;
    }

    if (comment.trim().length === 0) {
      Alert.alert("Th√¥ng b√°o", "Vui l√≤ng nh·∫≠p nh·∫≠n x√©t c·ªßa b·∫°n.");
      return;
    }

    if (!user?.id) {
      Alert.alert("L·ªói", "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√°.");
      return;
    }

    setIsSubmitting(true);

    try {
      const reviewData = {
        reservationId: parseInt(reservationId as string),
        stadiumId: parseInt(stadiumId as string),
        userId: user.id,
        rating,
        comment: comment.trim(),
      };

      console.log("üîÑ Submitting review:", reviewData);

      await createReview({
        variables: {
          createReviewInput: reviewData,
        },
      });

      console.log("‚úÖ Review submitted successfully");

      Alert.alert(
        "Th√†nh c√¥ng",
        "C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√°! ƒê√°nh gi√° c·ªßa b·∫°n s·∫Ω gi√∫p c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng d·ªãch v·ª•.",
        [
          {
            text: "Xem t·∫•t c·∫£ ƒë√°nh gi√°",
            onPress: () => {
              router.replace({
                pathname: "/stadium-booking/review",
                params: {
                  stadiumId: stadiumId as string,
                  stadiumName: stadiumName as string,
                },
              });
            },
          },
          {
            text: "ƒê√≥ng",
            onPress: () => router.back(),
          },
        ]
      );
    } catch (error: any) {
      // Check if this is the expected "Review already exists" error
      const isReviewExistsError = error.message?.includes(
        "Review already exists"
      );

      if (!isReviewExistsError) {
        // Only log unexpected errors to console
        console.error("Error submitting review:", error);
      }

      // Handle specific error cases
      let errorMessage = "Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i sau.";
      let errorTitle = "L·ªói";

      if (!isReviewExistsError) {
        console.log("üîÑ Error message:", error.message);
      }
      if (error.message?.includes("Review already exists")) {
        errorTitle = "ƒê√£ ƒë√°nh gi√°";
        errorMessage =
          "B·∫°n ƒë√£ ƒë√°nh gi√° cho l·ªãch ƒë·∫∑t n√†y r·ªìi. M·ªói l·ªãch ƒë·∫∑t ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° m·ªôt l·∫ßn.";

        // Navigate back since they can't submit another review
        Alert.alert(errorTitle, errorMessage, [
          {
            text: "Xem ƒë√°nh gi√° c·ªßa t√¥i",
            onPress: () => {
              router.replace({
                pathname: "/stadium-booking/review",
                params: {
                  stadiumId: stadiumId as string,
                  stadiumName: stadiumName as string,
                },
              });
            },
          },
          {
            text: "ƒê√≥ng",
            onPress: () => router.back(),
          },
        ]);
        return;
      } else if (error.message?.includes("not found")) {
        errorMessage = "Kh√¥ng t√¨m th·∫•y th√¥ng tin l·ªãch ƒë·∫∑t.";
      } else if (error.message?.includes("not completed")) {
        errorMessage = "Ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° sau khi ho√†n th√†nh l·ªãch ƒë·∫∑t.";
      } else if (
        error.message?.includes("network") ||
        error.message?.includes("Network")
      ) {
        errorMessage = "Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra v√† th·ª≠ l·∫°i.";
      } else if (error.message?.includes("GraphQLError")) {
        // Extract the actual error message from GraphQL error
        const graphqlError = error.message.split("GraphQLError: ")[1];
        if (graphqlError) {
          if (graphqlError.includes("Review already exists")) {
            errorTitle = "ƒê√£ ƒë√°nh gi√°";
            errorMessage =
              "B·∫°n ƒë√£ ƒë√°nh gi√° cho l·ªãch ƒë·∫∑t n√†y r·ªìi. M·ªói l·ªãch ƒë·∫∑t ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° m·ªôt l·∫ßn.";

            Alert.alert(errorTitle, errorMessage, [
              {
                text: "Xem ƒë√°nh gi√° c·ªßa t√¥i",
                onPress: () => {
                  router.replace({
                    pathname: "/stadium-booking/review",
                    params: {
                      stadiumId: stadiumId as string,
                      stadiumName: stadiumName as string,
                    },
                  });
                },
              },
              {
                text: "ƒê√≥ng",
                onPress: () => router.back(),
              },
            ]);
            return;
          } else {
            errorMessage = graphqlError;
          }
        }
      }

      Alert.alert(errorTitle, errorMessage);
    } finally {
      setIsSubmitting(false);
    }
  };

  const renderStars = () => {
    const stars = [];
    for (let i = 1; i <= 5; i++) {
      stars.push(
        <TouchableOpacity
          key={i}
          onPress={() => handleStarPress(i)}
          className="mx-1"
        >
          <Ionicons
            name={i <= rating ? "star" : "star-outline"}
            size={40}
            color={i <= rating ? "#FFD700" : "#D1D5DB"}
          />
        </TouchableOpacity>
      );
    }
    return stars;
  };

  const getRatingText = () => {
    switch (rating) {
      case 1:
        return "R·∫•t kh√¥ng h√†i l√≤ng";
      case 2:
        return "Kh√¥ng h√†i l√≤ng";
      case 3:
        return "B√¨nh th∆∞·ªùng";
      case 4:
        return "H√†i l√≤ng";
      case 5:
        return "R·∫•t h√†i l√≤ng";
      default:
        return "Ch·ªçn s·ªë sao ƒë·ªÉ ƒë√°nh gi√°";
    }
  };

  return (
    <KeyboardAvoidingView
      className="flex-1 bg-[#F5F5F5]"
      behavior={Platform.OS === "ios" ? "padding" : "height"}
    >
      {/* Header */}
      <View className="w-full h-32 relative border-b-primary border-b-2">
        <View className="flex-row items-center justify-center mt-16">
          <TouchableOpacity
            className="absolute left-4"
            onPress={() => router.back()}
          >
            <Ionicons
              name="arrow-back-circle-outline"
              size={40}
              color="#7CB518"
            />
          </TouchableOpacity>
          <Text className="text-2xl font-bold text-primary">Vi·∫øt ƒë√°nh gi√°</Text>
          <TouchableOpacity
            className="absolute right-4"
            onPress={() => {
              router.push({
                pathname: "/stadium-booking/review",
                params: {
                  stadiumId: stadiumId as string,
                  stadiumName: stadiumName as string,
                },
              });
            }}
          >
            <Text className="text-primary font-semibold">Xem ƒë√°nh gi√°</Text>
          </TouchableOpacity>
        </View>
      </View>

      <ScrollView className="flex-1 p-4">
        {/* Reservation Info Card */}
        <View className="bg-white rounded-xl p-4 mb-6 shadow-sm">
          <Text className="text-lg font-bold text-gray-900 mb-3">
            Th√¥ng tin l·ªãch ƒë·∫∑t
          </Text>

          <View className="space-y-2">
            <View className="flex-row justify-between">
              <Text className="text-gray-600">S√¢n:</Text>
              <Text className="font-medium text-gray-900">{stadiumName}</Text>
            </View>

            <View className="flex-row justify-between">
              <Text className="text-gray-600">M√¥n th·ªÉ thao:</Text>
              <Text className="font-medium text-gray-900">{sport}</Text>
            </View>

            <View className="flex-row justify-between">
              <Text className="text-gray-600">S·ªë s√¢n:</Text>
              <Text className="font-medium text-gray-900">
                S√¢n {courtNumber}
              </Text>
            </View>

            <View className="flex-row justify-between">
              <Text className="text-gray-600">Ng√†y:</Text>
              <Text className="font-medium text-gray-900">
                {new Date(date as string).toLocaleDateString("vi-VN")}
              </Text>
            </View>

            <View className="flex-row justify-between">
              <Text className="text-gray-600">Gi·ªù:</Text>
              <Text className="font-medium text-gray-900">
                {startTime} - {endTime}
              </Text>
            </View>
          </View>
        </View>

        {/* Rating Section */}
        <View className="bg-white rounded-xl p-4 mb-6 shadow-sm">
          <Text className="text-lg font-bold text-gray-900 mb-4 text-center">
            B·∫°n ƒë√°nh gi√° d·ªãch v·ª• nh∆∞ th·∫ø n√†o?
          </Text>

          <View className="flex-row justify-center items-center mb-4">
            {renderStars()}
          </View>

          <Text className="text-center text-gray-600 font-medium">
            {getRatingText()}
          </Text>
        </View>

        {/* Comment Section */}
        <View className="bg-white rounded-xl p-4 mb-6 shadow-sm">
          <Text className="text-lg font-bold text-gray-900 mb-4">
            Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n
          </Text>

          <TextInput
            className="border border-gray-300 rounded-lg p-3 text-gray-900 min-h-[120px]"
            placeholder="Nh·∫≠n x√©t v·ªÅ ch·∫•t l∆∞·ª£ng s√¢n, d·ªãch v·ª•, ti·ªán √≠ch, nh√¢n vi√™n..."
            multiline
            numberOfLines={6}
            textAlignVertical="top"
            value={comment}
            onChangeText={setComment}
            maxLength={500}
          />

          <Text className="text-right text-gray-500 text-sm mt-2">
            {comment.length}/500
          </Text>
        </View>

        {/* Tips Section */}
        <View className="bg-blue-50 rounded-xl p-4 mb-6">
          <View className="flex-row items-center mb-3">
            <Ionicons name="information-circle" size={20} color="#3B82F6" />
            <Text className="text-blue-700 font-semibold ml-2">
              G·ª£i √Ω vi·∫øt ƒë√°nh gi√°
            </Text>
          </View>
          <Text className="text-blue-600 text-sm leading-5">
            ‚Ä¢ Ch·∫•t l∆∞·ª£ng s√¢n v√† ti·ªán √≠ch{"\n"}‚Ä¢ Th√°i ƒë·ªô ph·ª•c v·ª• c·ªßa nh√¢n vi√™n
            {"\n"}‚Ä¢ V·ªá sinh v√† an to√†n{"\n"}‚Ä¢ Gi√° c·∫£ so v·ªõi ch·∫•t l∆∞·ª£ng{"\n"}‚Ä¢
            B·∫°n c√≥ gi·ªõi thi·ªáu cho ng∆∞·ªùi kh√°c kh√¥ng?
          </Text>
        </View>
      </ScrollView>

      {/* Submit Button */}
      <View className="bg-white border-t border-gray-200 p-4">
        <TouchableOpacity
          onPress={handleSubmitReview}
          disabled={isSubmitting || rating === 0 || comment.trim().length === 0}
          className={`rounded-lg py-4 px-4 ${
            isSubmitting || rating === 0 || comment.trim().length === 0
              ? "bg-gray-400"
              : "bg-primary"
          }`}
        >
          <Text className="text-white text-center font-bold text-lg">
            {isSubmitting ? "ƒêang g·ª≠i..." : "G·ª≠i ƒë√°nh gi√°"}
          </Text>
        </TouchableOpacity>
      </View>
    </KeyboardAvoidingView>
  );
}
