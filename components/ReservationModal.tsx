import { updateReservationStatus } from "@/services/reservation";
import { Reservation } from "@/types";
import { Ionicons } from "@expo/vector-icons";
import React, { useState } from "react";
import {
  ActivityIndicator,
  Alert,
  Modal,
  ScrollView,
  Text,
  TouchableOpacity,
  View,
} from "react-native";

interface ReservationModalProps {
  visible: boolean;
  reservation: Reservation | null;
  onClose: () => void;
  onStatusChange?: (
    reservationId: number,
    newStatus: "PENDING" | "CONFIRMED" | "CANCELLED" | "COMPLETED"
  ) => void;
  userRole?: "OWNER" | "CUSTOMER"; // Add user role prop
}

const ReservationModal: React.FC<ReservationModalProps> = ({
  visible,
  reservation,
  onClose,
  onStatusChange,
  userRole = "CUSTOMER", // Default to customer if not specified
}) => {
  const [isUpdating, setIsUpdating] = useState(false);

  // Debug logging for modal props
  console.log("üîç ReservationModal props:", {
    visible,
    reservationId: reservation?.id,
    reservationExists: !!reservation,
    hasOnClose: !!onClose,
    hasOnStatusChange: !!onStatusChange,
    userRole: userRole, // Add userRole to debug logging
  });

  console.log("üë§ USER ROLE DEBUG:", {
    userRole,
    isOwner: userRole === "OWNER",
    isCustomer: userRole === "CUSTOMER",
  });

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(price);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "CONFIRMED":
        return "text-green-600 bg-green-100";
      case "PENDING":
        return "text-orange-600 bg-orange-100";
      case "CANCELLED":
        return "text-red-600 bg-red-100";
      case "COMPLETED":
        return "text-blue-600 bg-blue-100";
      default:
        return "text-gray-600 bg-gray-100";
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case "CONFIRMED":
        return "ƒê√£ x√°c nh·∫≠n";
      case "PENDING":
        return "Ch·ªù x√°c nh·∫≠n";
      case "CANCELLED":
        return "ƒê√£ h·ªßy";
      case "COMPLETED":
        return "Ho√†n th√†nh";
      default:
        return status;
    }
  };

  const handleStatusChange = async (
    newStatus: "PENDING" | "CONFIRMED" | "CANCELLED" | "COMPLETED"
  ) => {
    if (!reservation) return;

    const statusMessages = {
      CONFIRMED: "x√°c nh·∫≠n",
      CANCELLED: "h·ªßy",
      COMPLETED: "ho√†n th√†nh",
      PENDING: "ƒë·∫∑t v·ªÅ ch·ªù x√°c nh·∫≠n",
    };

    Alert.alert(
      "Thay ƒë·ªïi tr·∫°ng th√°i",
      `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ${statusMessages[newStatus]} l·ªãch ƒë·∫∑t n√†y?`,
      [
        {
          text: "H·ªßy",
          style: "cancel",
        },
        {
          text: "X√°c nh·∫≠n",
          style: "destructive",
          onPress: async () => {
            try {
              setIsUpdating(true);

              // Validate reservation data
              if (!reservation.id) {
                console.error("‚ùå Missing reservation ID:", reservation);
                throw new Error(
                  "Reservation ID is missing. Cannot update status."
                );
              }

              console.log(
                `üîÑ Updating reservation ${reservation.id} status to ${newStatus}`
              );

              // Log complete reservation data for debugging
              console.log("üêõ Complete reservation object:", {
                id: reservation.id,
                userId: reservation.userId,
                stadiumId: reservation.stadiumId,
                status: reservation.status,
                courtNumber: reservation.courtNumber,
                startTime: reservation.startTime,
                endTime: reservation.endTime,
                date: reservation.date,
                totalPrice: reservation.totalPrice,
                sport: reservation.sport,
                courtType: reservation.courtType,
                user: reservation.user,
                stadium: reservation.stadium,
              });

              // Call API to update reservation status
              await updateReservationStatus(reservation.id, newStatus);

              console.log(
                `‚úÖ Successfully updated reservation status to ${newStatus}`
              );

              // Call the parent component's callback to update local state
              if (onStatusChange) {
                onStatusChange(reservation.id, newStatus);
              }

              // Close modal
              onClose();

              // Show success message
              Alert.alert(
                "Th√†nh c√¥ng",
                `ƒê√£ ${statusMessages[newStatus]} l·ªãch ƒë·∫∑t th√†nh c√¥ng!`,
                [{ text: "OK" }]
              );
            } catch (error) {
              console.error("üí• Error updating reservation status:", error);

              // Show error message
              Alert.alert(
                "L·ªói",
                `Kh√¥ng th·ªÉ ${statusMessages[newStatus]} l·ªãch ƒë·∫∑t. Vui l√≤ng th·ª≠ l·∫°i sau.`,
                [{ text: "OK" }]
              );
            } finally {
              setIsUpdating(false);
            }
          },
        },
      ]
    );
  };

  if (!reservation) {
    console.log("‚ùå ReservationModal: reservation is null, returning null");
    return null;
  }

  console.log("‚úÖ ReservationModal: About to render modal");

  // Debug logging
  console.log("üêõ Modal reservation data:", {
    totalPrice: reservation.totalPrice,
    totalPriceType: typeof reservation.totalPrice,
    date: reservation.date,
    createdAt: reservation.createdAt,
    courtNumber: reservation.courtNumber,
    stadium: reservation.stadium,
  });

  console.log("üé≠ ReservationModal: Rendering Modal with visible =", visible);

  return (
    <Modal
      visible={visible}
      animationType="slide"
      presentationStyle="pageSheet"
      onRequestClose={onClose}
    >
      <View className="flex-1 bg-white">
        {/* Header */}
        <View className="flex-row items-center justify-between px-4 py-3 border-b border-gray-200">
          <Text className="text-lg font-bold text-gray-900">
            Chi ti·∫øt l·ªãch ƒë·∫∑t
          </Text>
          <TouchableOpacity
            onPress={onClose}
            className="w-8 h-8 items-center justify-center rounded-full bg-gray-100"
          >
            <Ionicons name="close" size={20} color="#374151" />
          </TouchableOpacity>
        </View>

        <ScrollView className="flex-1">
          {/* Reservation Info */}
          <View className="bg-white p-4">
            {/* Status */}
            <View className="flex-row items-center justify-between mb-4">
              <Text className="text-base font-semibold text-gray-900">
                Tr·∫°ng th√°i
              </Text>
              <View
                className={`px-3 py-1 rounded-full ${getStatusColor(
                  reservation.status
                )}`}
              >
                <Text className="text-sm font-medium">
                  {getStatusText(reservation.status)}
                </Text>
              </View>
            </View>

            {/* Booking Details */}
            <View className="bg-gray-50 rounded-lg p-4 mb-4">
              <Text className="text-lg font-bold text-gray-900 mb-3">
                Th√¥ng tin l·ªãch ƒë·∫∑t
              </Text>

              <View className="space-y-3">
                <View className="flex-row justify-between">
                  <Text className="text-gray-600">M√¥n th·ªÉ thao:</Text>
                  <Text className="font-medium text-gray-900">
                    {reservation.sport || "Kh√¥ng c√≥ th√¥ng tin"}
                  </Text>
                </View>

                <View className="flex-row justify-between">
                  <Text className="text-gray-600">Lo·∫°i s√¢n:</Text>
                  <Text className="font-medium text-gray-900">
                    {reservation.courtType || "Kh√¥ng c√≥ th√¥ng tin"}
                  </Text>
                </View>

                <View className="flex-row justify-between">
                  <Text className="text-gray-600">S·ªë s√¢n:</Text>
                  <Text className="font-medium text-gray-900">
                    {reservation.stadium?.fields?.find(
                      (field) => field.id === reservation.courtNumber
                    )?.fieldName || `S√¢n ${reservation.courtNumber}`}
                  </Text>
                </View>

                <View className="flex-row justify-between">
                  <Text className="text-gray-600">Ng√†y:</Text>
                  <Text className="font-medium text-gray-900">
                    {reservation.date
                      ? new Date(reservation.date)
                          .toLocaleDateString("vi-VN")
                          .includes("Invalid")
                        ? reservation.date
                        : new Date(reservation.date).toLocaleDateString("vi-VN")
                      : "Kh√¥ng c√≥ th√¥ng tin"}
                  </Text>
                </View>

                <View className="flex-row justify-between">
                  <Text className="text-gray-600">Gi·ªù:</Text>
                  <Text className="font-medium text-gray-900">
                    {reservation.startTime} - {reservation.endTime}
                  </Text>
                </View>

                <View className="flex-row justify-between">
                  <Text className="text-gray-600">T·ªïng ti·ªÅn:</Text>
                  <Text className="font-bold text-primary text-lg">
                    {formatPrice(Number(reservation.totalPrice) || 0)}
                  </Text>
                </View>
              </View>
            </View>

            {/* Customer Info */}
            {reservation.user && (
              <View className="bg-gray-50 rounded-lg p-4 mb-4">
                <Text className="text-lg font-bold text-gray-900 mb-3">
                  Th√¥ng tin kh√°ch h√†ng
                </Text>

                <View className="space-y-3">
                  {reservation.user.fullName && (
                    <View className="flex-row justify-between">
                      <Text className="text-gray-600">H·ªç t√™n:</Text>
                      <Text className="font-medium text-gray-900">
                        {reservation.user.fullName}
                      </Text>
                    </View>
                  )}

                  {reservation.user.phoneNumber && (
                    <View className="flex-row justify-between">
                      <Text className="text-gray-600">S·ªë ƒëi·ªán tho·∫°i:</Text>
                      <Text className="font-medium text-gray-900">
                        {reservation.user.phoneNumber}
                      </Text>
                    </View>
                  )}

                  {reservation.user.email && (
                    <View className="flex-row justify-between">
                      <Text className="text-gray-600">Email:</Text>
                      <Text className="font-medium text-gray-900">
                        {reservation.user.email}
                      </Text>
                    </View>
                  )}
                </View>
              </View>
            )}

            {/* Booking History */}
            <View className="bg-gray-50 rounded-lg p-4 mb-6">
              <Text className="text-lg font-bold text-gray-900 mb-3">
                L·ªãch s·ª≠
              </Text>

              <View className="space-y-2">
                <View className="flex-row justify-between">
                  <Text className="text-gray-600">Ng√†y ƒë·∫∑t:</Text>
                  <Text className="font-medium text-gray-900">
                    {reservation.createdAt
                      ? new Date(reservation.createdAt)
                          .toLocaleDateString("vi-VN")
                          .includes("Invalid")
                        ? reservation.createdAt
                        : new Date(reservation.createdAt).toLocaleDateString(
                            "vi-VN"
                          )
                      : "Kh√¥ng c√≥ th√¥ng tin"}
                  </Text>
                </View>

                <View className="flex-row justify-between">
                  <Text className="text-gray-600">Gi·ªù ƒë·∫∑t:</Text>
                  <Text className="font-medium text-gray-900">
                    {reservation.createdAt
                      ? new Date(reservation.createdAt)
                          .toLocaleTimeString("vi-VN")
                          .includes("Invalid")
                        ? reservation.createdAt
                        : new Date(reservation.createdAt).toLocaleTimeString(
                            "vi-VN"
                          )
                      : "Kh√¥ng c√≥ th√¥ng tin"}
                  </Text>
                </View>
              </View>
            </View>
          </View>
        </ScrollView>

        {/* Action Buttons */}
        {reservation.status !== "COMPLETED" && (
          <View className="border-t border-gray-200 p-4 bg-white">
            <Text className="text-lg font-bold text-gray-900 mb-4">
              {userRole === "OWNER" ? "Thay ƒë·ªïi tr·∫°ng th√°i" : "H√†nh ƒë·ªông"}
            </Text>

            {isUpdating && (
              <View className="flex-row items-center justify-center py-3 mb-4">
                <ActivityIndicator size="small" color="#7CB518" />
                <Text className="ml-2 text-gray-600">ƒêang c·∫≠p nh·∫≠t...</Text>
              </View>
            )}

            {/* DEBUG: Log before rendering buttons */}
            {(() => {
              console.log("üîò BUTTONS RENDER DEBUG:", {
                userRole,
                reservationStatus: reservation.status,
                isOwner: userRole === "OWNER",
                isCustomer: userRole === "CUSTOMER",
                willShowOwnerButtons: userRole === "OWNER",
                willShowCustomerButtons: userRole === "CUSTOMER",
              });
              return null;
            })()}

            <View className="space-y-3">
              {/* OWNER: Can perform all status changes */}
              {userRole === "OWNER" && (
                <>
                  {(() => {
                    console.log("üîµ RENDERING OWNER BUTTONS");
                    return null;
                  })()}
                  {reservation.status !== "CONFIRMED" && (
                    <TouchableOpacity
                      onPress={() => handleStatusChange("CONFIRMED")}
                      disabled={isUpdating}
                      className={`rounded-lg py-3 px-4 ${
                        isUpdating ? "bg-gray-400" : "bg-green-500"
                      }`}
                    >
                      <View className="flex-row items-center justify-center">
                        {isUpdating && (
                          <ActivityIndicator
                            size="small"
                            color="white"
                            className="mr-2"
                          />
                        )}
                        <Text className="text-white text-center font-semibold">
                          X√°c nh·∫≠n l·ªãch ƒë·∫∑t
                        </Text>
                      </View>
                    </TouchableOpacity>
                  )}

                  {reservation.status !== "CANCELLED" && (
                    <TouchableOpacity
                      onPress={() => handleStatusChange("CANCELLED")}
                      disabled={isUpdating}
                      className={`rounded-lg py-3 px-4 ${
                        isUpdating ? "bg-gray-400" : "bg-red-500"
                      }`}
                    >
                      <View className="flex-row items-center justify-center">
                        {isUpdating && (
                          <ActivityIndicator
                            size="small"
                            color="white"
                            className="mr-2"
                          />
                        )}
                        <Text className="text-white text-center font-semibold">
                          H·ªßy l·ªãch ƒë·∫∑t
                        </Text>
                      </View>
                    </TouchableOpacity>
                  )}

                  {reservation.status === "CONFIRMED" && (
                    <TouchableOpacity
                      onPress={() => handleStatusChange("COMPLETED")}
                      disabled={isUpdating}
                      className={`rounded-lg py-3 px-4 ${
                        isUpdating ? "bg-gray-400" : "bg-blue-500"
                      }`}
                    >
                      <View className="flex-row items-center justify-center">
                        {isUpdating && (
                          <ActivityIndicator
                            size="small"
                            color="white"
                            className="mr-2"
                          />
                        )}
                        <Text className="text-white text-center font-semibold">
                          ƒê√°nh d·∫•u ho√†n th√†nh
                        </Text>
                      </View>
                    </TouchableOpacity>
                  )}

                  {reservation.status !== "PENDING" && (
                    <TouchableOpacity
                      onPress={() => handleStatusChange("PENDING")}
                      disabled={isUpdating}
                      className={`rounded-lg py-3 px-4 ${
                        isUpdating ? "bg-gray-400" : "bg-orange-500"
                      }`}
                    >
                      <View className="flex-row items-center justify-center">
                        {isUpdating && (
                          <ActivityIndicator
                            size="small"
                            color="white"
                            className="mr-2"
                          />
                        )}
                        <Text className="text-white text-center font-semibold">
                          ƒê·∫∑t v·ªÅ ch·ªù x√°c nh·∫≠n
                        </Text>
                      </View>
                    </TouchableOpacity>
                  )}
                </>
              )}

              {/* CUSTOMER: Can only cancel reservations */}
              {userRole === "CUSTOMER" && (
                <>
                  {(() => {
                    console.log("üî¥ RENDERING CUSTOMER BUTTONS");
                    return null;
                  })()}
                  {reservation.status === "PENDING" && (
                    <TouchableOpacity
                      onPress={() => handleStatusChange("CANCELLED")}
                      disabled={isUpdating}
                      className={`rounded-lg py-3 px-4 ${
                        isUpdating ? "bg-gray-400" : "bg-red-500"
                      }`}
                    >
                      <View className="flex-row items-center justify-center">
                        {isUpdating && (
                          <ActivityIndicator
                            size="small"
                            color="white"
                            className="mr-2"
                          />
                        )}
                        <Text className="text-white text-center font-semibold">
                          H·ªßy l·ªãch ƒë·∫∑t
                        </Text>
                      </View>
                    </TouchableOpacity>
                  )}

                  {reservation.status === "CONFIRMED" && (
                    <View className="bg-gray-50 rounded-lg p-4">
                      <Text className="text-gray-600 text-center">
                        L·ªãch ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. Vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp
                        v·ªõi s√¢n ƒë·ªÉ thay ƒë·ªïi.
                      </Text>
                    </View>
                  )}

                  {reservation.status === "CANCELLED" && (
                    <View className="bg-red-50 rounded-lg p-4">
                      <Text className="text-red-600 text-center font-medium">
                        L·ªãch ƒë·∫∑t ƒë√£ b·ªã h·ªßy
                      </Text>
                    </View>
                  )}
                </>
              )}
            </View>
          </View>
        )}

        {/* Show completion message when status is COMPLETED */}
        {reservation.status === "COMPLETED" && (
          <View className="border-t border-gray-200 p-4 bg-white">
            <View className="flex-row items-center justify-center py-4">
              <View className="w-12 h-12 rounded-full bg-green-100 items-center justify-center mr-3">
                <Ionicons name="checkmark-circle" size={24} color="#10B981" />
              </View>
              <View className="flex-1">
                <Text className="text-lg font-bold text-green-600">
                  Ho√†n th√†nh
                </Text>
              </View>
            </View>
          </View>
        )}
      </View>
    </Modal>
  );
};

export default ReservationModal;
